#A SEQ program to implement Ukkonen's Suffix Tree Construction for use in MUMmer
#Suffix tree adapted from: https://rosettacode.org/wiki/Ukkonenâ€™s_Suffix_Tree_Construction

import lambdaHelpers as l

leafEnd = [-1]

#Class that represents a Node within the suffix tree
class Node:
    children: dict[str, Node] 

    #Pointer to another Node
    suffixLink: Node

    #[start, end] interval represents edge 
    start: int
    end: list[int]

    #For leaf nodes, starts index of suffix from path from root to leaf
    suffixIndex: int 
    isRoot: bool

    #Initialize a new node
    def __init__(self: Node, s: int, e: list[int], r: bool, root: Node):
        self.children = dict[str, Node]()
        #If its the root, suffix link is itself, else suffix link is root
        if r:
            self.suffixLink = self
        else:
            self.suffixLink = root
        self.start = s
        self.end = e
        self.suffixIndex = -1
        self.isRoot = r

    #Node equivalence check
    def __eq__(self: Node, value: Node):
        equal = True
        if self.start != value.start:
            equal = False
        if self.end != value.end:
            equal = False
        if self.suffixIndex != value.suffixIndex:
            equal = False
        return equal
    
    #Node inequivalence check
    def __ne__(self: Node, value: Node):
        return not self.__eq__(value)

    #String representation of Node
    def __str__(self: Node):
        retStr = ""
        for e in self.children:
            retStr += (e + " ")

        return retStr

#Class that represents the suffix tree.
#Built following Ukkonen's linear time Suffix Tree construction Algorithm
class SuffixTree:
    text: str #Input reference
    query: str #Input Query
    root: Node 
    lastNewNode: Node #Points to newly created internal node
    activeNode: Node
    activeEdge: int #Index of current character in string
    activeLength: int
    remainingSuffixCt: int #Suffices to be added to the Suffix Tree
    rootEnd: list[int]
    splitEnd: int 
    size: int #Length of shorter input sequence
    emptyNode: Node 
    isText: bool 
    isReverseComplement: bool #Command Line Flag
    outputPrefix: str #Output files will start with prefix

    #Initialize/Build Suffix Tree for shorter of the two input sequences
    def __init__(self: SuffixTree, s1: str, s2: str, isRev: bool, prefix: str):
        self.text = s1 
        self.query = s2
        self.rootEnd = [-1]
        self.root = Node(-1, self.rootEnd, True, None) #Create root Node
        self.activeNode = self.root
        self.activeEdge = -1
        self.activeLength = 0
        self.remainingSuffixCt = 0
        self.lastNewNode = None
        self.splitEnd = -1 
        self.emptyNode = Node(-5, [-5], True, None) #Create empty node
        self.isReverseComplement = isRev
        self.outputPrefix = prefix

        #Build the suffix tree for the shorter sequence
        if len(self.text) < len(self.query):
            #Input s1 is shorter
            self.isText = True
            self.size = len(self.text)
            self.text += "#"
        else: 
            #Input s2 is shorter
            self.isText = False
            self.size = len(self.query)
            self.query += "$"

        #Construct the suffix tree for each suffix in the shorter input sequence
        for i in range(self.size):
            self.extendSuffixTree(i)

        #Recursively set suffix index of all nodes in newly built Suffix Tree
        labelHeight = 0
        self.setSuffixIndex(self.root, labelHeight)

    #Get the length of an edge given a node. Node contains (start, end) for edge.
    def edgeLength(self: SuffixTree, n: Node) -> int:
        if n.isRoot:
            return 0
        return n.end[0] - n.start + 1

    #Ukkonen Skip/Count Trick #1 
    def walkDown(self: SuffixTree, curr: Node) -> bool:
        if self.activeLength >= self.edgeLength(curr):
            self.activeEdge += self.edgeLength(curr)
            self.activeLength -= self.edgeLength(curr)
            self.activeNode = curr
            return True
        return False

    #Ukkonen's Suffix Tree (ST) Construction algorithm. ST is extended one character at a time.
    def extendSuffixTree(self: SuffixTree, pos: int):
        global leafEnd
        #extends all leaves created in the tree so far
        leafEnd[0] = pos
        self.remainingSuffixCt += 1
        self.lastNewNode = self.emptyNode
        
        #The suffix tree is built with the text
        if self.isText:
            #Add all suffices to tree one by one
            while self.remainingSuffixCt > 0:
                if self.activeLength == 0:
                    self.activeEdge = pos
                
                #No outgoing edge with current character from active Node
                if self.text[self.activeEdge] not in self.activeNode.children:
                    #New leaf node corresponding to sequence1
                    self.activeNode.children[self.text[self.activeEdge]] = Node(pos, leafEnd, False, self.root)
                    if self.lastNewNode != self.emptyNode:
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = self.emptyNode
                #Edge already exists
                else:
                    nextNode = self.activeNode.children[self.text[self.activeEdge]]
                    if self.walkDown(nextNode):
                        continue
                    if self.text[nextNode.start + self.activeLength] == self.text[pos]:
                        if (self.lastNewNode != self.emptyNode) and (self.activeNode != self.root):
                            self.lastNewNode.suffixLink = self.activeNode
                            self.lastNewNode = self.emptyNode
                        self.activeLength += 1
                        break

                    temp = nextNode.start + self.activeLength - 1
                    self.splitEnd = temp

                    #New internal node
                    split = Node(nextNode.start, [self.splitEnd], False, self.root)
                    self.activeNode.children[self.text[self.activeEdge]] = split

                    #New leaf node
                    split.children[self.text[pos]] = Node(pos, leafEnd, False, self.root)
                    nextNode.start += self.activeLength
                    split.children[self.text[nextNode.start]] = nextNode
                    if self.lastNewNode != self.emptyNode:
                        self.lastNewNode.suffixLink = split
                    self.lastNewNode = split
                self.remainingSuffixCt -= 1
                if (self.activeNode == self.root) and (self.activeLength > 0):
                    self.activeLength -= 1
                    self.activeEdge = pos - self.remainingSuffixCt + 1
                elif (self.activeNode != self.root):
                    self.activeNode = self.activeNode.suffixLink
        #The suffix tree is built with the query
        else:
            #Add all suffices to tree one by one
            while self.remainingSuffixCt > 0:
                if self.activeLength == 0:
                    self.activeEdge = pos
                
                #No outgoing edge with current character from active Node
                if self.query[self.activeEdge] not in self.activeNode.children:
                    #New leaf node corresponding to sequence1
                    self.activeNode.children[self.query[self.activeEdge]] = Node(pos, leafEnd, False, self.root)
                    if self.lastNewNode != self.emptyNode:
                        self.lastNewNode.suffixLink = self.activeNode
                        self.lastNewNode = self.emptyNode
                #Edge already exists
                else:
                    nextNode = self.activeNode.children[self.query[self.activeEdge]]
                    if self.walkDown(nextNode):
                        continue
                    if self.query[nextNode.start + self.activeLength] == self.query[pos]:
                        if (self.lastNewNode != self.emptyNode) and (self.activeNode != self.root):
                            self.lastNewNode.suffixLink = self.activeNode
                            self.lastNewNode = self.emptyNode
                        self.activeLength += 1
                        break

                    temp = nextNode.start + self.activeLength - 1
                    self.splitEnd = temp

                    #New internal node
                    split = Node(nextNode.start, [self.splitEnd], False, self.root)
                    self.activeNode.children[self.query[self.activeEdge]] = split

                    #New leaf node
                    split.children[self.query[pos]] = Node(pos, leafEnd, False, self.root)
                    nextNode.start += self.activeLength
                    split.children[self.query[nextNode.start]] = nextNode
                    if self.lastNewNode != self.emptyNode:
                        self.lastNewNode.suffixLink = split
                    self.lastNewNode = split
                self.remainingSuffixCt -= 1
                if (self.activeNode == self.root) and (self.activeLength > 0):
                    self.activeLength -= 1
                    self.activeEdge = pos - self.remainingSuffixCt + 1
                elif (self.activeNode != self.root):
                    self.activeNode = self.activeNode.suffixLink

    #Set suffix index of all nodes within the suffix tree.
    def setSuffixIndex(self: SuffixTree, n: Node, lH: int):
        leaf = 1
        for e in n.children:
            leaf = 0
            self.setSuffixIndex(n.children[e], lH + self.edgeLength(n.children[e]))
        if leaf == 1:
            n.suffixIndex = self.size - lH

    #Move along edge. Used to check if string exists within Suffix Tree.
    def traverseEdge(self: SuffixTree, s: str, i: int, start: int, end: int):
        for j in range(end - start + 1):
            if i < len(s):
                if self.isText:
                    if (self.text[start + j] != s[i]):
                        return -1
                else:
                    if (self.query[start + j] != s[i]):
                        return -1
                i += 1
        if (i == len(s)):
            return 1
        return 0

    #Traverses Suffix Tree in search of string s
    def doTraversal(self: SuffixTree, n: Node, s: str, i: int):
        if (n.start != -1): #if not root
            response = self.traverseEdge(s, i, n.start, n.end[0])
            if response != 0:
                return response
        i = i + self.edgeLength(n)
        if (s[i] in n.children):
            return self.doTraversal(n.children[s[i]], s, i)
        else:
            return -1

    #Traverses the ST, returns True if the substring is contained within the ST, otherwise: returns False
    def findSubstring(self: SuffixTree, s: str) -> bool:
        response = self.doTraversal(self.root, s, 0)
        if response == 1:
            return True
        else:
            return False

    #Traversal Method to print out all leaf nodes and their substrings.
    def traverse(self: SuffixTree, n: Node, s: str):
        if (len(n.children) > 0):
            for e in n.children:
                if self.isText:
                    n_s = s + self.text[n.children[e].start:n.children[e].end[0] + 1]
                    self.traverse(n.children[e], n_s)
                else:
                    n_s = s + self.query[n.children[e].start:n.children[e].end[0] + 1]
                    self.traverse(n.children[e], n_s)
        else:
            print("leaf: " + s)

    #Find all start positions of a substring: https://stackoverflow.com/questions/4664850/how-to-find-all-occurrences-of-a-substring
    def getStartPositions(self: SuffixTree, a_str: str, sub: str):
        start = 0
        while True:
            start = a_str.find(sub, start)
            if start == -1: return
            yield start
            start += len(sub)

    #Get the maximal substrings between the two input sequences.
    #Return a list of maximal matches containing start positions and lengths
    def getMaximalSubstrings(self: SuffixTree, minMatch: int) -> list[tuple[int,int,int]]:
        #text start pos, query start pos, matchLength
        substrings = list[tuple[int,int,int]]()
        
        if self.isText:
            queryIndex = 0
            while queryIndex < (len(self.query) - minMatch):
                substring = self.query[queryIndex:(queryIndex + minMatch)]
                #Common substring found, get the total matching sequence. Increment
                #the query position by the length of match. Add substring to list
                if (self.findSubstring(substring)):
                    queryStartPos = queryIndex
                    textStartPos = list(self.getStartPositions(self.text, substring))[0]
                    matchLength = minMatch
                    endFound = False
                    while (not endFound) and ((queryStartPos + matchLength) < len(self.query)):
                        if (self.query[queryStartPos + matchLength] != self.text[textStartPos + matchLength]):
                            endFound = True
                        else:
                            matchLength += 1
                    substrings.append((textStartPos, queryStartPos, matchLength))
                    queryIndex += matchLength
                #No common substring found, increment query position by 1  
                else:
                    queryIndex += 1
        else:
            textIndex = 0
            while textIndex < (len(self.text) - minMatch):
                substring = self.text[textIndex:(textIndex + minMatch)]
                #Common substring found, get the total matching sequence. Increment
                #the query position by the length of match. Add substring to list
                if (self.findSubstring(substring)):
                    textStartPos = textIndex
                    queryStartPos = list(self.getStartPositions(self.query, substring))[0]
                    matchLength = minMatch
                    endFound = False
                    while (not endFound) and ((textStartPos + matchLength) < len(self.text)):
                        if (self.text[textStartPos + matchLength] != self.query[queryStartPos + matchLength]):
                            endFound = True
                        else:
                            matchLength += 1
                    substrings.append((textStartPos, queryStartPos, matchLength))
                    textIndex += matchLength
                #No common substring found, increment query position by 1  
                else:
                    textIndex += 1

        return self.increasingSubset(sorted(substrings, reverse = True, key = l.getPos2))

    #Return an increasing subset of maximal matches in reference to start positions in sequences.
    def increasingSubset(self: SuffixTree, cs: list[tuple[int,int,int]]) -> list[tuple[int,int,int]]:
        #initialize lists
        tenLongest = list[tuple[int,int,int]]()
        increasingSubset = list[tuple[int,int,int]]()
        #add ten largest matches or however many are found if less than 10
        for i in range(len(cs)):
            if i == 10:
                break
            tenLongest.append(cs[i])

        #Sort lists by query match start position
        tenLongest = sorted(tenLongest, reverse = False, key = l.getPos1)
        cs = sorted(cs, reverse = False, key = l.getPos1)

        curr = 0
        for t in range(len(tenLongest)):
            while (cs[curr] != tenLongest[t]) and (curr < len(cs)):
                if (len(increasingSubset)) > 0:
                    if (cs[curr][0] > increasingSubset[len(increasingSubset) - 1][0]) and (cs[curr][0] < tenLongest[t][0]):
                        increasingSubset.append(cs[curr])
                else:
                    increasingSubset.append(cs[curr])
                curr += 1
                
            increasingSubset.append(tenLongest[t])
            curr += 1

        increasingSubset = sorted(increasingSubset, reverse = False, key = l.getPos1)

        self.writeMUMsOutputFile(increasingSubset)
        return increasingSubset
    
    #Parse CIGAR strings to get alignment of gap regions between matches.
    def parseCIGAR(self: SuffixTree, c: CIGAR, startT: int, startQ: int):
        s1 = ""
        s2 = ""
        tIndex = startT
        qIndex = startQ

        for term in c:
            if term[1] == "M":
                s1 += self.text[tIndex:tIndex + term[0]]
                s2 += self.query[qIndex:qIndex + term[0]]
                tIndex += term[0]
                qIndex += term[0]

            elif term[1] == "I" or term[1] == "S":
                s1 += self.text[tIndex: tIndex + term[0]]
                s2 += ("-" * term[0])
                tIndex += term[0]
            elif term[1] == "D":
                s1 += ("-" * term[0])
                s2 += self.query[qIndex: qIndex + term[0]]
                qIndex += term[0]
            else:
                print(term[1])

        return s1, s2

    #Once the increasing subset is found, the alignment can be constructed
    def constructAlignment(self: SuffixTree, lis: list[tuple[int,int,int]]):
        string1 = ""
        string2 = ""
        for i in range(len(lis)):
            if i == 0:
                seq1 = seq(self.text[:lis[i][0]])
                seq2 = seq(self.query[:lis[i][1]])

                aln = seq1 @ seq2

                strs = self.parseCIGAR(aln.cigar, 0, 0)

                string1 += strs[0]
                string2 += strs[1]
                
                string1 += self.text[lis[i][0]: lis[i][0] + lis[i][2]]
                string2 += self.query[lis[i][1]: lis[i][1] + lis[i][2]]

            else:
                seq1 = seq(self.text[(lis[i - 1][0] + lis[i - 1][2]):lis[i][0]])
                seq2 = seq(self.query[(lis[i - 1][1] + lis[i - 1][2]):lis[i][1]])

                aln = seq1 @ seq2

                strs = self.parseCIGAR(aln.cigar, (lis[i - 1][0] + lis[i - 1][2]), (lis[i - 1][1] + lis[i - 1][2]))

                string1 += strs[0]
                string2 += strs[1]

                string1 += self.text[lis[i][0]: lis[i][0] + lis[i][2]]
                string2 += self.query[lis[i][1]: lis[i][1] + lis[i][2]]

        return string1, string2

    #Trying to write the same outputs as MUMmer1
    def writeMUMsOutputFile(self: SuffixTree, mums: list[tuple[int,int,int]]):
        fileName = self.outputPrefix + ".mums"
        with open(fileName, "w") as f:
            id = 1
            #Write the header line: since there is only one reference/query, there will only be 1 id
            if (self.isReverseComplement):
                f.write("> " + str(id) + " Rev" + "\n")
            else:
                f.write("> " + str(id) + "\n")
            for mum in mums:
                line = "   " + str(mum[0]) + "\t" + str(mum[1]) + "\t" + str(mum[2]) + "\n"
                f.write(line)

